import React from 'react';

declare module 'aesthetic' {
  declare export type PrimitiveType = string | number | boolean;

  declare export type StyleDeclarationValue = PrimitiveType | StyleDeclaration;

  declare export type StyleDeclaration = { [propName: string]: StyleDeclarationValue | StyleDeclarationValue[] };

  declare export type AtRuleMap = { [ruleName: string]: StyleDeclaration };

  declare export type AtRuleSet = { [selector: string]: AtRuleMap };

  declare export type AtRuleCache = { [ruleName: string]: string };

  declare export type StyleDeclaration = string | StyleDeclaration;

  declare export type StyleDeclarations = { [selector: string]: StyleDeclaration };

  declare export type StyleCallback = (theme: StyleDeclaration, prevStyles: StyleDeclarations) => StyleDeclarations;

  declare export type StyleDeclarationOrCallback = StyleDeclarations | StyleCallback;

  declare export type MaybeClassName = PrimitiveType | { [key: string]: boolean } | MaybeClassName[];

  declare export type ClassNameMap = { [selector: string]: string };

  declare export type TransformedDeclarations = StyleDeclarations | ClassNameMap;

  declare export type WrappedComponent = ReactClass<*>;

  declare export type HOCComponent = ReactClass<*>;

  declare export type HOCOptions = {
    extendable?: boolean,
    extendFrom?: string,
    pure?: boolean,
    styleName?: string,
    stylesPropName?: string,
    themePropName?: string,
  };

  declare export type EventCallback = (() => void) |
    ((selector: string, properties: StyleDeclaration) => void) |
    ((selector: string, atRuleName: string, properties: StyleDeclaration) => void);

  declare export type FallbackMap = { [selector: string]: StyleDeclaration };

  declare export type AestheticOptions = {
    defaultTheme: string,
    extendable: boolean,
    pure: boolean,
    stylesPropName: string,
    themePropName: string,
  };

  declare export class Adapter {
    bypassNativeStyleSheet: boolean;
    native: boolean;
    options: Object;
    unifiedSyntax: boolean;
    constructor(options?: Object): this;
    transform(styleName: string, declarations: StyleDeclarations): TransformedDeclarations;
  }

  declare export class ClassNameAdapter extends Adapter {}

  declare export class ThemeProvider extends React.Component<*, *, *> {}

  declare export default class Aesthetic {
    adapter: Adapter;
    cache: { [styleName: string]: TransformedDeclarations };
    native: boolean;
    options: AestheticOptions;
    parents: { [childStyleName: string]: string };
    styles: { [styleName: string]: StyleDeclarationOrCallback };
    themes: { [themeName: string]: StyleDeclaration };
    constructor(adapter: Adapter, options?: Object): this;
    extendTheme(parentThemeName: string, themeName: string, theme?: StyleDeclaration, globals?: StyleDeclarations): this;
    getStyles(styleName: string, themeName?: string): StyleDeclarations;
    getTheme(themeName?: string): StyleDeclaration;
    registerTheme(themeName: string, theme?: StyleDeclaration, globals?: StyleDeclarations): this;
    setAdapter(adapter: Adapter): this;
    setStyles(styleName: string, declarations: StyleDeclarationOrCallback, extendFrom?: string): this;
    transformStyles(styleName: string, themeName?: string): TransformedDeclarations;
    validateTransform(styleName: string, selector: string, value: StyleDeclaration): StyleDeclaration;
  }

  declare export function style(aesthetic: Aesthetic, styles: StyleDeclarationOrCallback, options?: HOCOptions): (WrappedComponent) => HOCComponent;

  declare export function createStyler(aesthetic: Aesthetic): style;

  declare export function classes(...values: MaybeClassName[]): string;
}

declare module 'aesthetic/unified' {
  import type { StyleDeclaration, StyleDeclarations, AtRuleSet, AtRuleMap, AtRuleCache, FallbackMap, EventCallback } from 'aesthetic';

  declare export default class UnifiedSyntax {
    static LOCAL: string;
    static GLOBAL: string;
    events: { [eventName: string]: EventCallback };
    fallbacks: FallbackMap;
    fontFaces: AtRuleMap;
    fontFacesCache: AtRuleCache;
    keyframes: AtRuleMap;
    keyframesCache: AtRuleCache;
    mediaQueries: AtRuleSet;
    convert(declarations: StyleDeclarations): StyleDeclarations;
    convertDeclaration(selector: string, properties: StyleDeclaration): StyleDeclaration;
    emit(eventName: string, args: mixed[]): this;
    extract(selector: string, atRule: string, rules: any, fromScope: string): void;
    extractFallbacks(selector: string, properties: StyleDeclaration, fromScope: string): void;
    extractFontFaces(selector: string, rules: AtRuleMap, fromScope: string): void;
    extractKeyframes(selector: string, rules: AtRuleMap, fromScope: string): void;
    extractMediaQueries(selector: string, rules: AtRuleMap, fromScope: string): void;
    off(eventName: string): this;
    on(eventName: string, callback: EventCallback): this;
    resetGlobalCache(): void;
    resetLocalCache(): void;
  }
}
