import React from 'react';

/*
declare module 'aesthetic' {
  declare export type PrimitiveType = string | number | boolean;

  declare export type CSSStyleValue = PrimitiveType | CSSStyle;

  declare export type CSSStyle = { [propName: string]: CSSStyleValue | CSSStyleValue[] };

  declare export type AtRuleMap = { [key: string]: CSSStyle };

  declare export type AtRuleSet = { [setName: string]: AtRuleMap };

  declare export type AtRuleCache = { [key: string]: string };

  declare export type StyleDeclaration = string | CSSStyle;

  declare export type StyleDeclarationMap = { [setName: string]: StyleDeclaration };

  declare export type StyleCallback = (theme: CSSStyle, prevStyles: StyleDeclarationMap) => StyleDeclarationMap;

  declare export type StyleDeclarationOrCallback = StyleDeclarationMap | StyleCallback;

  declare export type MaybeClassName = string | number | { [key: string]: boolean } | MaybeClassName[];

  declare export type ClassNameMap = { [setName: string]: string };

  declare export type WrappedComponent = ReactClass<*>;

  declare export type HOCComponent = ReactClass<*>;

  declare export type HOCOptions = {
    extendable?: boolean,
    extendFrom?: string,
    styleName?: string,
    classNamesPropName?: string,
    themePropName?: string,
  };

  /*
  declare export class Adapter {
    transform(styleName: string, declarations: StyleDeclarationMap): ClassNameMap;
  }

  declare export class ClassNameAdapter extends Adapter {}

  declare export class ThemeProvider extends React.Component<*, *, *> {}

  declare export default class Aesthetic {
    adapter: Adapter;
    parents: { [childStyleName: string]: string };
    styles: { [styleName: string]: StyleDeclarationOrCallback };
    themes: { [themeName: string]: CSSStyle };
    classNames: { [styleName: string]: ClassNameMap };
    constructor(adapter: Adapter): this;
    extendTheme(parentThemeName: string, themeName: string, theme: CSSStyle, globals?: StyleDeclarationMap): this;
    getStyles(styleName: string, themeName?: string): StyleDeclarationMap;
    getTheme(themeName: string): CSSStyle;
    registerTheme(themeName: string, theme: CSSStyle, globals?: StyleDeclarationMap): this;
    setAdapter(adapter: Adapter): this;
    setStyles(styleName: string, declarations: StyleDeclarationOrCallback, extendFrom?: string): this;
    transformStyles(styleName: string, themeName?: string): ClassNameMap;
  }

  declare export function style(aesthetic: Aesthetic, styles: StyleDeclarationOrCallback, options?: HOCOptions): (WrappedComponent) => HOCComponent;

  declare export function createStyler(aesthetic: Aesthetic): style;

  declare export function classes(...values: MaybeClassName[]): string;
}

declare module 'aesthetic/unified' {
  import type { CSSStyle, StyleDeclarationMap, AtRuleSet, AtRuleMap, AtRuleCache } from 'aesthetic';

  declare export type EventCallback = (() => void) |
    ((setName: string, properties: CSSStyle) => void) |
    ((setName: string, atRuleName: string, properties: CSSStyle) => void);

  declare export type FallbackMap = { [setName: string]: CSSStyle };

  declare export default class UnifiedSyntax {
    static LOCAL: string;
    static GLOBAL: string;
    events: { [eventName: string]: EventCallback };
    fallbacks: FallbackMap;
    fontFaces: AtRuleMap;
    fontFaceNames: AtRuleCache;
    keyframes: AtRuleMap;
    keyframeNames: AtRuleCache;
    mediaQueries: AtRuleSet;
    convert(declarations: StyleDeclarationMap): StyleDeclarationMap;
    convertDeclaration(setName: string, properties: CSSStyle): CSSStyle;
    emit(eventName: string, args: mixed[]): this;
    extract(setName: string, atRule: string, rules: AtRuleMap | CSSStyle, fromScope: string): void;
    extractFallbacks(setName: string, properties: CSSStyle, fromScope: string): void;
    extractFontFaces(setName: string, rules: AtRuleMap, fromScope: string): void;
    extractKeyframes(setName: string, rules: AtRuleMap, fromScope: string): void;
    extractMediaQueries(setName: string, rules: AtRuleMap, fromScope: string): void;
    off(eventName: string): this;
    on(eventName: string, callback: EventCallback): this;
    resetGlobalCache(): void;
    resetLocalCache(): void;
  }
}

declare module 'aesthetic-utils' {
  import type { AtRuleMap, AtRuleCache, CSSStyle } from 'aesthetic';

  declare export function createStyleElement(id: string): HTMLElement;

  declare export function injectAtRules(
    properties: CSSStyle,
    atName: string,
    atRules: AtRuleMap,
  ): void;

  declare export function injectFallbacks(
    properties: CSSStyle,
    fallbacks: CSSStyle,
  ): void;

  declare export function injectRuleByLookup(
    properties: CSSStyle,
    propName: string,
    lookup: AtRuleMap | AtRuleCache,
    flatten?: boolean,
  ): void;
}

declare module 'aesthetic/lib/helpers/isObject' {
  declare export default function isObject<T>(value: T): boolean;
}

declare module 'aesthetic/lib/helpers/toArray' {
  declare export default function toArray<T>(value: T): T[];
}
*/
