import React from 'react';

declare module 'aesthetic' {
  declare export type PrimitiveType = string | number | boolean;

  declare export type CSSStyleValue = PrimitiveType | CSSStyle;

  declare export type CSSStyle = { [propName: string]: CSSStyleValue | CSSStyleValue[] };

  declare export type AtRuleMap = { [setName: string]: CSSStyle };

  declare export type StyleDeclaration = string | CSSStyle;

  declare export type StyleDeclarationMap = { [setName: string]: StyleDeclaration };

  declare export type StyleCallback = (theme: CSSStyle, prevStyles: StyleDeclarationMap) => StyleDeclarationMap;

  declare export type StyleDeclarationOrCallback = StyleDeclarationMap | StyleCallback;

  declare export type MaybeClassName = string | number | { [key: string]: boolean } | MaybeClassName[];

  declare export type ClassNameMap = { [setName: string]: string };

  declare export type WrappedComponent = ReactClass<*>;

  declare export type HOCComponent = ReactClass<*>;

  declare export type HOCOptions = {
    extendable?: boolean,
    extendFrom?: string,
    styleName?: string,
    classNamesPropName?: string,
    themePropName?: string,
  };

  declare export class Adapter {
    static LOCAL: string;
    static GLOBAL: string;
    fallbacks: AtRuleMap;
    fontFaces: AtRuleMap;
    fontFaceNames: { [key: string]: string };
    keyframes: AtRuleMap;
    keyframeNames: { [key: string]: string };
    mediaQueries: AtRuleMap;
    styleTag: ?HTMLElement;
    unifiedSyntax: boolean;
    convert(styleName: string, declarations: StyleDeclarationMap): StyleDeclarationMap;
    convertProperties(setName: string, properties: CSSStyle): CSSStyle;
    disableUnifiedSyntax(): this;
    extract(setName: string, atRule: string, properties: AtRuleMap, fromScope: string): void;
    extractFallbacks(setName: string, properties: AtRuleMap, fromScope: string): void;
    extractFontFaces(setName: string, properties: AtRuleMap, fromScope: string): void;
    extractKeyframes(setName: string, properties: AtRuleMap, fromScope: string): void;
    extractMediaQueries(setName: string, properties: AtRuleMap, fromScope: string): void;
    onConvertStart(): void;
    onConvertStop(): void;
    onExtractedFallback(setName: string, propName: string, properties: CSSStyle): void;
    onExtractedFontFace(setName: string, familyName: string, properties: CSSStyle): void;
    onExtractedKeyframe(setName: string, animationName: string, properties: CSSStyle): void;
    onExtractedMediaQuery(setName: string, mediaQuery: string, properties: CSSStyle): void;
    resetGlobalCache(): void;
    resetLocalCache(): void;
    transform(styleName: string, declarations: StyleDeclarationMap): ClassNameMap;
    transformStyles(styleName: string, declarations: StyleDeclarationMap): ClassNameMap;
  }

  declare export class ClassNameAdapter extends Adapter {}

  declare export class ThemeProvider extends React.Component<*, *, *> {}

  declare export default class Aesthetic {
    adapter: Adapter;
    parents: { [childStyleName: string]: string };
    styles: { [styleName: string]: StyleDeclarationOrCallback };
    themes: { [themeName: string]: CSSStyle };
    classNames: { [styleName: string]: ClassNameMap };
    constructor(adapter: Adapter): this;
    extendTheme(parentThemeName: string, themeName: string, theme: CSSStyle, globals: StyleDeclarationMap): this;
    getStyles(styleName: string, themeName: string): StyleDeclarationMap;
    getTheme(themeName: string): CSSStyle;
    registerTheme(themeName: string, theme: CSSStyle, globals: StyleDeclarationMap): this;
    setAdapter(adapter: Adapter): this;
    setStyles(styleName: string, declarations: StyleDeclarationOrCallback): this;
    transformStyles(styleName: string, themeName: string): ClassNameMap;
  }

  declare export function style(aesthetic: Aesthetic, defaultStyles: StyleDeclarationOrCallback, options: HOCOptions): (WrappedComponent) => HOCComponent;

  declare export function createStyler(aesthetic: Aesthetic): style;

  declare export function classes(...values: MaybeClassName[]): string;
}

declare module 'aesthetic/lib/helpers/createStyleElement' {
  declare export default function createStyleElement(id: string): HTMLElement;
}

declare module 'aesthetic/lib/helpers/injectAtRuleMap' {
  import type { CSSStyle } from 'aesthetic';

  declare export default function injectAtRuleMap(
    properties: CSSStyle,
    atName: string,
    atRules: CSSStyle,
  ): void;
}

declare module 'aesthetic/lib/helpers/injectFallbacks' {
  import type { CSSStyle } from 'aesthetic';

  declare export default function injectFallbacks(
    properties: CSSStyle,
    fallbacks: CSSStyle,
  ): void;
}

declare module 'aesthetic/lib/helpers/injectRuleByLookup' {
  import type { CSSStyle } from 'aesthetic';

  declare export default function injectRuleByLookup(
    properties: CSSStyle,
    propName: string,
    lookup: CSSStyle,
    flatten?: boolean,
  ): void;
}

declare module 'aesthetic/lib/helpers/isObject' {
  declare export default function isObject<T>(value: T): boolean;
}

declare module 'aesthetic/lib/helpers/isPrimitive' {
  declare export default function isPrimitive<T>(value: T): boolean;
}

declare module 'aesthetic/lib/helpers/toArray' {
  declare export default function toArray<T>(value: T): T[];
}
