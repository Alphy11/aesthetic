import React from 'react';
import {
  ClassNames,
  StyleDeclarations,
  AtRules,
  CSSStyle,
  CSSStyleValue,
  MaybeClassName,
  StyleOrCallback,
  HOCOptions,
  HOCComponent,
  WrappedComponent,
} from '../packages/types';

declare module 'aesthetic' {
  declare export class Adapter {
    static LOCAL: string;
    static GLOBAL: string;
    fallbacks: AtRules;
    fontFaces: AtRules;
    fontFaceNames: { [key: string]: string };
    keyframes: AtRules;
    keyframeNames: { [key: string]: string };
    mediaQueries: AtRules;
    styleTag: ?HTMLElement;
    unifiedSyntax: boolean;
    convert(styleName: string, declarations: StyleDeclarations): StyleDeclarations;
    convertProperties(setName: string, properties: CSSStyle): CSSStyle;
    extract(setName: string, atRule: string, properties: AtRules, fromScope: string): void;
    extractFallbacks(setName: string, properties: AtRules, fromScope: string): void;
    extractFontFaces(setName: string, properties: AtRules, fromScope: string): void;
    extractKeyframes(setName: string, properties: AtRules, fromScope: string): void;
    extractMediaQueries(setName: string, properties: AtRules, fromScope: string): void;
    lookupRule(value: string, lookup: CSSStyle): CSSStyleValue[];
    onConvertStart(): void;
    onConvertStop(): void;
    onExtractedFallback(setName: string, propName: string, properties: CSSStyle): void;
    onExtractedFontFace(setName: string, familyName: string, properties: CSSStyle): void;
    onExtractedKeyframe(setName: string, animationName: string, properties: CSSStyle): void;
    onExtractedMediaQuery(setName: string, mediaQuery: string, properties: CSSStyle): void;
    resetGlobalCache(): void;
    resetLocalCache(): void;
    transform(styleName: string, declarations: StyleDeclarations): ClassNames;
    transformStyles(styleName: string, declarations: StyleDeclarations): ClassNames;
  }

  declare export class ClassNameAdapter extends Adapter {}

  declare export class ThemeProvider extends React.Component<*, *, *> {}

  declare export default class Aesthetic {
    adapter: Adapter;
    locked: { [key: string]: boolean };
    styles: { [key: string]: StyleOrCallback };
    prevStyles: { [key: string]: StyleOrCallback };
    themes: { [key: string]: CSSStyle };
    classNames: { [key: string]: ClassNames };
    constructor(adapter: Adapter): this;
    extractDeclarations(styleName: string, themeName: string): StyleDeclarations;
    lockStyling(styleName: string): this;
    registerTheme(themeName: string, theme: CSSStyle, globals: StyleDeclarations): this;
    setAdapter(adapter: Adapter): this;
    setStyles(styleName: string, declarations: StyleOrCallback, merge: boolean): this;
    transformStyles(styleName: string, themeName: string): ClassNames;
  }

  declare export function style(aesthetic: Aesthetic, defaultStyles: StyleOrCallback, options: HOCOptions): (WrappedComponent) => HOCComponent;

  declare export function createStyler(aesthetic: Aesthetic): style;

  declare export function classes(...values: MaybeClassName[]): string;
}

declare module 'aesthetic/lib/helpers/createStyleElement' {
  declare export default function createStyleElement(id: string): HTMLElement;
}

declare module 'aesthetic/lib/helpers/injectAtRules' {
  declare export default function injectAtRules(properties: CSSStyle, atName: string, atRules: CSSStyle): void;
}

declare module 'aesthetic/lib/helpers/injectFallbacksArrays' {
  declare export default function injectFallbacksArrays(properties: CSSStyle, fallbacks: CSSStyle): void;
}

declare module 'aesthetic/lib/helpers/isObject' {
  declare export default function isObject<T>(value: T): boolean;
}

declare module 'aesthetic/lib/helpers/isPrimitive' {
  declare export default function isPrimitive<T>(value: T): boolean;
}

declare module 'aesthetic/lib/helpers/toArray' {
  declare export default function toArray<T>(value: T): T[];
}
